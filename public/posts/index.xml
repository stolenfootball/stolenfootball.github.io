<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on </title>
    <link>https://stolenfootball.github.io/posts/</link>
    <description>Recent content in Posts on </description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 19 Aug 2025 21:45:44 -0400</lastBuildDate>
    <atom:link href="https://stolenfootball.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Windows Drivers Series Part 8 - Bypassing SMEP</title>
      <link>https://stolenfootball.github.io/posts/series/windows_drivers/p8_smep_bypass/</link>
      <pubDate>Tue, 19 Aug 2025 21:45:44 -0400</pubDate>
      <guid>https://stolenfootball.github.io/posts/series/windows_drivers/p8_smep_bypass/</guid>
      <description>&lt;p&gt;Continuing on from the &lt;a href=&#34;https://stolenfootball.github.io/posts/series/windows_drivers/p7_buffer_overflow_win7/&#34; target=&#34;_blank&#34;&gt;last post&lt;/a&gt;, it&amp;rsquo;s time to make two big changes.  We&amp;rsquo;re moving from Windows 7 to Windows 8.1, and we&amp;rsquo;re moving from x86 to x64.&lt;/p&gt;&#xA;&lt;p&gt;Like before, Windows 8.1 isn&amp;rsquo;t necessarily just available for download, so I&amp;rsquo;m providing a link to the ISO hosted on my Google Drive &lt;a href=&#34;https://drive.google.com/drive/folders/1BqItKuSwl1NkQibBXcaDUzoJjv1G2QzQ?usp=sharing&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;We&amp;rsquo;ll be using the same bug from the &lt;a href=&#34;https://github.com/hacksysteam/HackSysExtremeVulnerableDriver&#34; target=&#34;_blank&#34;&gt;HackSysExtremeVulnerableDriver&lt;/a&gt; as last time, just modifying it to work on 64 bit Windows 8.1.  If you want to read more about the bug, please see the last post.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Windows Drivers Series Part 7 - Buffer Overflow on Windows 7</title>
      <link>https://stolenfootball.github.io/posts/series/windows_drivers/p7_buffer_overflow_win7/</link>
      <pubDate>Fri, 15 Aug 2025 14:37:47 -0400</pubDate>
      <guid>https://stolenfootball.github.io/posts/series/windows_drivers/p7_buffer_overflow_win7/</guid>
      <description>&lt;p&gt;Time to develop the first exploit of the series - a stack based buffer overflow for Windows 7.&lt;/p&gt;&#xA;&lt;p&gt;I&amp;rsquo;ll be using the &lt;a href=&#34;https://github.com/hacksysteam/HackSysExtremeVulnerableDriver&#34; target=&#34;_blank&#34;&gt;HackSysExtremeVulnerableDriver&lt;/a&gt; when writing exploits for this section.  This is an intentionally vulnerable driver that has a large number of different vulnerabilities coded into it for people to practice on.  I highly recommend downloading it and following along.&lt;/p&gt;&#xA;&lt;h2 id=&#34;why-windows-7&#34;&gt;Why Windows 7?&lt;/h2&gt;&#xA;&lt;p&gt;Kernel exploit development on Windows is a bit different from user land exploit development.  There are different goals and different mitigations that prevent an exploit developer from achieving them.&lt;/p&gt;</description>
    </item>
    <item>
      <title>HowTo - Set up Windows Kernel Debugging in VMware</title>
      <link>https://stolenfootball.github.io/posts/research/2025/windows_kernel_debugger/</link>
      <pubDate>Wed, 06 Aug 2025 14:59:28 -0400</pubDate>
      <guid>https://stolenfootball.github.io/posts/research/2025/windows_kernel_debugger/</guid>
      <description>&lt;p&gt;There are two main ways people set up kernel debuggers for Windows - via the network and a via a virtual serial cable.&lt;/p&gt;&#xA;&lt;p&gt;When possible, I recommend using the network variation.  It is a lot faster and more stable, and is what is currently recommended by Microsoft.  That said, for some older operating systems, particularly if dealing with Windows 7, the serial option is the only one possible.&lt;/p&gt;&#xA;&lt;p&gt;I use VMware Workstation Pro as my hypervisor for kernel debugging so all examples given here will use that.  Many people also use Hyper-V though, and it should be easy enough to modify these instructions for that as well.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Windows Drivers Series Part 6 - Debugging and Basic Rev</title>
      <link>https://stolenfootball.github.io/posts/series/windows_drivers/p6_debugging_drivers/</link>
      <pubDate>Wed, 06 Aug 2025 11:35:29 -0400</pubDate>
      <guid>https://stolenfootball.github.io/posts/series/windows_drivers/p6_debugging_drivers/</guid>
      <description>&lt;p&gt;Finally, time to get to what I promised in the first place - reversing a driver!&lt;/p&gt;&#xA;&lt;p&gt;The first step, of course, will be to set up a debugger.  Then we&amp;rsquo;ll put our driver into IDA, rebase the &lt;code&gt;.text&lt;/code&gt; segment, and look at some IRPs flowing through it.&lt;/p&gt;&#xA;&lt;h2 id=&#34;install-the-vm&#34;&gt;Install the VM&lt;/h2&gt;&#xA;&lt;p&gt;I&amp;rsquo;ll be using &lt;a href=&#34;https://www.vmware.com/products/desktop-hypervisor/workstation-and-fusion&#34; target=&#34;_blank&#34;&gt;VMWare Workstation Pro&lt;/a&gt; as my hypervisor for this.  It&amp;rsquo;s the most ubiquitous hypervisor out there (and in my opinion the easiest to use).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Windows Drivers Series Part 5 - Basic Driver Functionality</title>
      <link>https://stolenfootball.github.io/posts/series/windows_drivers/p5_basic_driver_function/</link>
      <pubDate>Tue, 22 Jul 2025 13:20:31 -0400</pubDate>
      <guid>https://stolenfootball.github.io/posts/series/windows_drivers/p5_basic_driver_function/</guid>
      <description>&lt;p&gt;Alright, all the work in the previous posts has led up to this: a driver that does something!&lt;/p&gt;&#xA;&lt;p&gt;Admittedly, it won&amp;rsquo;t do much.  The driver I will be going over here heavily takes code from the &lt;a href=&#34;https://github.com/microsoft/Windows-driver-samples/tree/main/general/ioctl/wdm&#34; target=&#34;_blank&#34;&gt;example IOCTL driver in the Windows driver samples repo&lt;/a&gt;, and all that does is copy data from one buffer to another.  It will, however, give a good idea of how drivers handle I/O from their calling applications, as well as some of the benefits and drawbacks of different IO methods.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Windows Drivers Series Part 4 - Interacting with the Driver</title>
      <link>https://stolenfootball.github.io/posts/series/windows_drivers/p4_interacting_with_driver/</link>
      <pubDate>Sun, 20 Jul 2025 11:46:16 -0400</pubDate>
      <guid>https://stolenfootball.github.io/posts/series/windows_drivers/p4_interacting_with_driver/</guid>
      <description>&lt;p&gt;If you&amp;rsquo;ve been following along with this series, in &lt;a href=&#34;https://stolenfootball.github.io/posts/series/windows_drivers/p3_minimum_viable_driver/index.html&#34; target=&#34;_blank&#34;&gt;the last post&lt;/a&gt; I walked through how to build a minimum viable driver and how to load it into Windows.&lt;/p&gt;&#xA;&lt;p&gt;That said, the previous driver simply loaded and unloaded itself, nothing more.  In this post we&amp;rsquo;re going to go over how to send messages to our driver and have it respond.&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-irp&#34;&gt;The IRP&lt;/h2&gt;&#xA;&lt;p&gt;As I explained in &lt;a href=&#34;https://stolenfootball.github.io/posts/series/windows_drivers/p2_whats_a_driver/index.html&#34; target=&#34;_blank&#34;&gt;part 2&lt;/a&gt;, a driver in Windows is a small piece of software that sits in kernel space and responds to requests.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Windows Drivers Series Part 3 - The Minimum Viable Driver</title>
      <link>https://stolenfootball.github.io/posts/series/windows_drivers/p3_minimum_viable_driver/</link>
      <pubDate>Thu, 17 Jul 2025 19:45:29 -0400</pubDate>
      <guid>https://stolenfootball.github.io/posts/series/windows_drivers/p3_minimum_viable_driver/</guid>
      <description>&lt;p&gt;Alright, enough talk.  The best way to learn is by doing, and by coding our own simple driver, we&amp;rsquo;ll get a good idea of what function driver code looks like.&lt;/p&gt;&#xA;&lt;h2 id=&#34;setting-up-the-dev-environment&#34;&gt;Setting up the dev environment&lt;/h2&gt;&#xA;&lt;p&gt;There are several tools you&amp;rsquo;ll need in order to compile your driver.  Driver development has gotten easier over the years, but it is still more complex than just compiling a userland C++ program.  You may benefit from installing all of this in a VM and saving a snapshot so you have it configured and ready to go whenever you want it, but it&amp;rsquo;s also perfectly fine to install the tools on bare metal.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Windows Drivers Series Part 2 - What&#39;s a Driver Anyways?</title>
      <link>https://stolenfootball.github.io/posts/series/windows_drivers/p2_whats_a_driver/</link>
      <pubDate>Wed, 16 Jul 2025 17:14:58 -0400</pubDate>
      <guid>https://stolenfootball.github.io/posts/series/windows_drivers/p2_whats_a_driver/</guid>
      <description>&lt;p&gt;If you&amp;rsquo;ve used Windows long enough, chances are you&amp;rsquo;ve heard the term driver before.  Admittedly, it was probably in the context of something like this:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;./images/1_driver_error.jpg&#34; alt=&#34;Driver Unable to Install&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;or this:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;./images/2_driver_error.webp&#34; alt=&#34;Blue Screen of Death&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;or potentially, given the audience for this kind of blog post, this?&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;./images/3_driver_error.jpg&#34; alt=&#34;Anti-Cheat Detected Cheating on Apex Legends&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;However, if we&amp;rsquo;re going to be doing exploit development work on drivers, it&amp;rsquo;s important to have a fundemental understanding of what a driver does and the role it plays in a modern operating system.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Windows Drivers Series Part 1 - Overview</title>
      <link>https://stolenfootball.github.io/posts/series/windows_drivers/p1_overview/</link>
      <pubDate>Mon, 14 Jul 2025 19:07:00 -0500</pubDate>
      <guid>https://stolenfootball.github.io/posts/series/windows_drivers/p1_overview/</guid>
      <description>&lt;h2 id=&#34;what-is-this&#34;&gt;What is this?&lt;/h2&gt;&#xA;&lt;p&gt;During the last semester of my master&amp;rsquo;s degree at UMass Amherst, I was fortunate enough to be able to take an exploit development class taught by Lurene Grenier.  I had previous experience in CTF style pwn, but this class pushed us all to move past CTF challenges to real world targets as fast as possible.  The thought process behind this was that although CTFs are great for learning the basics, because of their contrived nature, the skills they impart don&amp;rsquo;t always translate to hacking on real software.&lt;/p&gt;</description>
    </item>
    <item>
      <title>UMass CTF 2025 - Ghost in the Leg</title>
      <link>https://stolenfootball.github.io/posts/writeups/2025/theleg/</link>
      <pubDate>Sun, 20 Apr 2025 15:00:00 -0500</pubDate>
      <guid>https://stolenfootball.github.io/posts/writeups/2025/theleg/</guid>
      <description>&lt;p&gt;This is a challenge I wrote for UMass CTF 2025 using a special version theLEG™ computer architecture.  I&amp;rsquo;ll have a separate series of blog posts on the architecture itself and why it is interesting, but for this I want to go over the specifics of the challenge.&lt;/p&gt;&#xA;&lt;h2 id=&#34;the-challenge&#34;&gt;The Challenge&lt;/h2&gt;&#xA;&lt;p&gt;Participants in the CTF were given the following prompt:&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;TheLEG™ just got updated with a brand new UI and speculative execution extension! Surely no one can read data from kernel space&amp;hellip;&lt;/p&gt;</description>
    </item>
    <item>
      <title>HowTo - Decryption of Signal Messages on Windows</title>
      <link>https://stolenfootball.github.io/posts/research/2025/signal_windows_decryption/</link>
      <pubDate>Sun, 26 Jan 2025 23:28:04 -0500</pubDate>
      <guid>https://stolenfootball.github.io/posts/research/2025/signal_windows_decryption/</guid>
      <description>&lt;p&gt;During HackTheBox University CTF, I played a challenge that involved decrypting Signal messages from a Windows computer that was running a new version of the Signal Windows Application.  If you&amp;rsquo;re interested in the full writeup of the challenge you can check it out &lt;a href=&#34;https://stolenfootball.github.io/posts/writeups/2024/htb-uni-ctf/signaling-victorious/&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;While doing the challenge, I noticed that there wasn&amp;rsquo;t much public information available about how to decrypt the messages database in the new Signal Windows app, and that information could be valuable for forensic investigators. With that in mind, I decided to strip out just the relevant parts from the earlier writeup to provide a better resource to that effect.&lt;/p&gt;</description>
    </item>
    <item>
      <title>HackTheBox Binary Badlands 2024 - Signaling Victorious</title>
      <link>https://stolenfootball.github.io/posts/writeups/2024/htb-uni-ctf/signaling-victorious/</link>
      <pubDate>Wed, 18 Dec 2024 20:31:50 -0500</pubDate>
      <guid>https://stolenfootball.github.io/posts/writeups/2024/htb-uni-ctf/signaling-victorious/</guid>
      <description>&lt;p&gt;This challenge came with two files - an encrypted 7-zip file named &lt;code&gt;backup.7z&lt;/code&gt; and a memory dump named &lt;code&gt;win10_memdump.elf&lt;/code&gt;. There was also a docker container available online running &lt;a href=&#34;https://github.com/bc-security/starkiller&#34; target=&#34;_blank&#34;&gt;Starkiller&lt;/a&gt;, which is a front-end management app for the post exploitation framework &lt;a href=&#34;https://github.com/EmpireProject/Empire&#34; target=&#34;_blank&#34;&gt;PowerShell Empire&lt;/a&gt;. When I visited the site, there was a login page requesting a username and password to access Starkiller, but no username and password were provided with the challenge.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;./images/1_starkiller.png&#34; alt=&#34;Starkiller Login&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>HackTheBox University CTF 2023 - ZombieNet</title>
      <link>https://stolenfootball.github.io/posts/writeups/2023/htb-uni-ctf/zombienet/</link>
      <pubDate>Tue, 17 Oct 2023 11:23:50 -0500</pubDate>
      <guid>https://stolenfootball.github.io/posts/writeups/2023/htb-uni-ctf/zombienet/</guid>
      <description>&lt;p&gt;The second forensics challenge for HackTheBox University CTF 2023 was called ZombieNet.  It gave participants an image of an OpenWRT router, and asked them to determine how the attackers were maintaining persistent access to the device.  This post will walk through the steps I took to solve the challenge.&lt;/p&gt;&#xA;&lt;h2 id=&#34;challenge-description&#34;&gt;Challenge Description&lt;/h2&gt;&#xA;&lt;p&gt;There was an attack on the NOC (Network Operations Center) of Hackster University and as a result, a large number of Network devices were compromised! After successfully fending off the attack the devices were decommissioned and sent off to be inspected. However, there is a strong suspicion among your peers that not all devices were identified! They suspect that the attackers managed to maintain access to the network despite our team&amp;rsquo;s efforts! It&amp;rsquo;s your job to investigate a recently used disk image and uncover how the Zombies maintain their access!&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
